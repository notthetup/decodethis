function TestCase (testFileJSON, audioContext){

	if (!testFileJSON)
		return;

	testFileJSON.status = "Untested";


	this.data = testFileJSON;
	this.data.class = "untested";
	this.data.action = "▶";
	this.onFinish = null;
	this.onProgress = null;
	this.onReset = null;
	this.percentComplete = 0;

	this.start = function(){
		self = this;
		this.status = "running";
		loadanddecode(this.data.path + this.data.filename, function (error, buffer){
			self.status = "complete";
			if (typeof self.onFinish === 'function'){
				self.onFinish(error, buffer);
			}
		}, function (event){
			if (event.lengthComputable) {
				self.percentComplete = Math.round(100*event.loaded/event.total);
			}
			if (typeof self.onProgress === 'function'){
				self.onProgress(self.percentComplete);
			}
		}, audioContext);
	};

	this.reset = function(){
		this.status = "init";
		this.percentComplete = 0;
		if (typeof this.onReset === 'function'){
			this.onReset();
		}
	};

	this.status = "init";
}


/*
* Downloads a sound file using XHR and decodes it using WebAudio
*
* @method loadanddecode
* @param {String} URL URL of the audio file to be downloaded.
* @param {Function} onLoadCallback Callback for when the decoded AudioBuffer is ready. Callback returns an {Error} (if any) and an {AudioBuffer}
* @param {Function} onProgressCallback Callback for progress event from the XHR download.
* @param {AudioContext} [AudioContext] Optional AudioContext to be used for decoding.
*
*/
function loadanddecode(URL, onLoadCallback, onProgressCallback, audioContext){
    if (!audioContext){
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        audioContext = new AudioContext();
    }
    var request = new XMLHttpRequest();
    request.open('GET', URL, true);
    request.responseType = 'arraybuffer';
    request.onload = function () {
        if (request.status === 200 || request.status === 304){
            audioContext.decodeAudioData(request.response, function(buffer){
                if (typeof onLoadCallback === 'function')
                    onLoadCallback(null, buffer);
            },function (){
                if (typeof onLoadCallback === 'function')
                    onLoadCallback(new Error("Decoding Error"), null);
            });
        }else{
            if (typeof onLoadCallback === 'function'){
                onLoadCallback(new Error("Loading Error : " + request.status), null);
            }
        }
    };
    request.onerror = function(){
        if (typeof onLoadCallback === 'function'){
           onLoadCallback(new Error("Loading Error : " + request.status), null);
       }
   };
   request.onprogress = function(event){
    if (typeof onProgressCallback === 'function'){
        onProgressCallback(event);
    }
};
request.send();
}

window.addEventListener('load', function(){

	var audioPath = "public/audio/";
	var indexFile = "files.json";
	window.AudioContext = window.AudioContext || window.webkitAudioContext;
	var audioContext = new window.AudioContext();

	var ractive;
	var titles;
	var tests = [];
	var testData = [];

	// Fetch datafile and create tests.
	xhrLoadJSON(audioPath + indexFile, function (jsonData){
		ractive = new Ractive({
			el: "testlist",
			template: '#head',
			data: { tests: tests}
		});

		if (typeof jsonData === 'string'){
			jsonData = JSON.parse(jsonData);
		}

		jsonData.files.forEach(function (titles){
			var test = createTestForFile(titles);
			tests.push(test);
		});

		var playallBtn = document.getElementById('playall');
		playallBtn.addEventListener('click', function() {
			function testCompleteCallback(index){
				if (index < tests.length-1){
					runTest(++index, testCompleteCallback);
				}else{
					actionSpan.className = "";
					playallBtn.firstElementChild.innerHTML = "✓";
					var styletag = document.getElementById('testAllOveride');
					styletag.innerHTML = ".play-all:after{content: 'tests done';}";
				}
			}
			var actionSpan = playallBtn.firstElementChild;
			actionSpan.innerHTML = "↻";
			actionSpan.className = "spin";
			playallBtn.disabled = true;
			var styletag = document.getElementById('testAllOveride');
			styletag.innerHTML = ".play-all:after{content: 'testing';}";
			runTest(0, testCompleteCallback);
		});

		ractive.on('starttest', function(event, index){
			runTest(index);
		});

		window.tests = tests;
	});

	function runTest(index, finishCallback){
		// Disable Test Button
		var test = tests[index];
		var dataPath = 'tests.' + index + ".data";

		test.onFinish = function (error, buffer){
			//console.log("done", index);
			if (error){
				ractive.set(dataPath+".status",error.toString());
				ractive.set(dataPath+".class","failed");
				ractive.set(dataPath+".action","✗");
			}else{
				ractive.set(dataPath+".status","Passed");
				ractive.set(dataPath+".class","passed");
				ractive.set(dataPath+".action","✓");
			}
			if (typeof finishCallback === 'function'){
				finishCallback(index);
			}
		};
		ractive.set(dataPath+".status","Testing");
		ractive.set(dataPath+".class","testing");
		ractive.set(dataPath+".action","↻");
		ractive.set(dataPath+".button","false");
		test.start();
	}

	function xhrLoadJSON(url, onLoadCallback){
		var request = new XMLHttpRequest();
		request.open('GET', url, true);
		request.responseType = 'json';
		request.onload = function (event){
			if (typeof onLoadCallback === 'function'){
				onLoadCallback(request.response);
			}
		};
		request.error = function (event){
			if (typeof onLoadCallback === 'function'){
				onLoadCallback(null);
			}
		};
		request.send();
	}


	function createTestForFile(fileData){
		fileData.path = audioPath;
		var test = new TestCase(fileData, audioContext);
		//console.log(test);
		return test;
	}
});

